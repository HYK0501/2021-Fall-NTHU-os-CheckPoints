                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module preemtive
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _myTimer0Handler
                                     12 	.globl _Bootstrap
                                     13 	.globl _main
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl _TempSP
                                    111 	.globl _Thread3SP
                                    112 	.globl _Thread2SP
                                    113 	.globl _Thread1SP
                                    114 	.globl _Thread0SP
                                    115 	.globl _bitmap
                                    116 	.globl _currentThreadId
                                    117 	.globl _createdThreadId
                                    118 	.globl _ThreadCreate
                                    119 	.globl _ThreadYield
                                    120 	.globl _ThreadExit
                                    121 ;--------------------------------------------------------
                                    122 ; special function registers
                                    123 ;--------------------------------------------------------
                                    124 	.area RSEG    (ABS,DATA)
      000000                        125 	.org 0x0000
                           000080   126 _P0	=	0x0080
                           000081   127 _SP	=	0x0081
                           000082   128 _DPL	=	0x0082
                           000083   129 _DPH	=	0x0083
                           000087   130 _PCON	=	0x0087
                           000088   131 _TCON	=	0x0088
                           000089   132 _TMOD	=	0x0089
                           00008A   133 _TL0	=	0x008a
                           00008B   134 _TL1	=	0x008b
                           00008C   135 _TH0	=	0x008c
                           00008D   136 _TH1	=	0x008d
                           000090   137 _P1	=	0x0090
                           000098   138 _SCON	=	0x0098
                           000099   139 _SBUF	=	0x0099
                           0000A0   140 _P2	=	0x00a0
                           0000A8   141 _IE	=	0x00a8
                           0000B0   142 _P3	=	0x00b0
                           0000B8   143 _IP	=	0x00b8
                           0000D0   144 _PSW	=	0x00d0
                           0000E0   145 _ACC	=	0x00e0
                           0000F0   146 _B	=	0x00f0
                                    147 ;--------------------------------------------------------
                                    148 ; special function bits
                                    149 ;--------------------------------------------------------
                                    150 	.area RSEG    (ABS,DATA)
      000000                        151 	.org 0x0000
                           000080   152 _P0_0	=	0x0080
                           000081   153 _P0_1	=	0x0081
                           000082   154 _P0_2	=	0x0082
                           000083   155 _P0_3	=	0x0083
                           000084   156 _P0_4	=	0x0084
                           000085   157 _P0_5	=	0x0085
                           000086   158 _P0_6	=	0x0086
                           000087   159 _P0_7	=	0x0087
                           000088   160 _IT0	=	0x0088
                           000089   161 _IE0	=	0x0089
                           00008A   162 _IT1	=	0x008a
                           00008B   163 _IE1	=	0x008b
                           00008C   164 _TR0	=	0x008c
                           00008D   165 _TF0	=	0x008d
                           00008E   166 _TR1	=	0x008e
                           00008F   167 _TF1	=	0x008f
                           000090   168 _P1_0	=	0x0090
                           000091   169 _P1_1	=	0x0091
                           000092   170 _P1_2	=	0x0092
                           000093   171 _P1_3	=	0x0093
                           000094   172 _P1_4	=	0x0094
                           000095   173 _P1_5	=	0x0095
                           000096   174 _P1_6	=	0x0096
                           000097   175 _P1_7	=	0x0097
                           000098   176 _RI	=	0x0098
                           000099   177 _TI	=	0x0099
                           00009A   178 _RB8	=	0x009a
                           00009B   179 _TB8	=	0x009b
                           00009C   180 _REN	=	0x009c
                           00009D   181 _SM2	=	0x009d
                           00009E   182 _SM1	=	0x009e
                           00009F   183 _SM0	=	0x009f
                           0000A0   184 _P2_0	=	0x00a0
                           0000A1   185 _P2_1	=	0x00a1
                           0000A2   186 _P2_2	=	0x00a2
                           0000A3   187 _P2_3	=	0x00a3
                           0000A4   188 _P2_4	=	0x00a4
                           0000A5   189 _P2_5	=	0x00a5
                           0000A6   190 _P2_6	=	0x00a6
                           0000A7   191 _P2_7	=	0x00a7
                           0000A8   192 _EX0	=	0x00a8
                           0000A9   193 _ET0	=	0x00a9
                           0000AA   194 _EX1	=	0x00aa
                           0000AB   195 _ET1	=	0x00ab
                           0000AC   196 _ES	=	0x00ac
                           0000AF   197 _EA	=	0x00af
                           0000B0   198 _P3_0	=	0x00b0
                           0000B1   199 _P3_1	=	0x00b1
                           0000B2   200 _P3_2	=	0x00b2
                           0000B3   201 _P3_3	=	0x00b3
                           0000B4   202 _P3_4	=	0x00b4
                           0000B5   203 _P3_5	=	0x00b5
                           0000B6   204 _P3_6	=	0x00b6
                           0000B7   205 _P3_7	=	0x00b7
                           0000B0   206 _RXD	=	0x00b0
                           0000B1   207 _TXD	=	0x00b1
                           0000B2   208 _INT0	=	0x00b2
                           0000B3   209 _INT1	=	0x00b3
                           0000B4   210 _T0	=	0x00b4
                           0000B5   211 _T1	=	0x00b5
                           0000B6   212 _WR	=	0x00b6
                           0000B7   213 _RD	=	0x00b7
                           0000B8   214 _PX0	=	0x00b8
                           0000B9   215 _PT0	=	0x00b9
                           0000BA   216 _PX1	=	0x00ba
                           0000BB   217 _PT1	=	0x00bb
                           0000BC   218 _PS	=	0x00bc
                           0000D0   219 _P	=	0x00d0
                           0000D1   220 _F1	=	0x00d1
                           0000D2   221 _OV	=	0x00d2
                           0000D3   222 _RS0	=	0x00d3
                           0000D4   223 _RS1	=	0x00d4
                           0000D5   224 _F0	=	0x00d5
                           0000D6   225 _AC	=	0x00d6
                           0000D7   226 _CY	=	0x00d7
                                    227 ;--------------------------------------------------------
                                    228 ; overlayable register banks
                                    229 ;--------------------------------------------------------
                                    230 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        231 	.ds 8
                                    232 ;--------------------------------------------------------
                                    233 ; internal ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area DSEG    (DATA)
                           000030   236 _createdThreadId	=	0x0030
                           000031   237 _currentThreadId	=	0x0031
                           000033   238 _bitmap	=	0x0033
                           000034   239 _Thread0SP	=	0x0034
                           000035   240 _Thread1SP	=	0x0035
                           000036   241 _Thread2SP	=	0x0036
                           000037   242 _Thread3SP	=	0x0037
                           000038   243 _TempSP	=	0x0038
                                    244 ;--------------------------------------------------------
                                    245 ; overlayable items in internal ram 
                                    246 ;--------------------------------------------------------
                                    247 	.area	OSEG    (OVR,DATA)
                                    248 ;--------------------------------------------------------
                                    249 ; indirectly addressable internal ram data
                                    250 ;--------------------------------------------------------
                                    251 	.area ISEG    (DATA)
                                    252 ;--------------------------------------------------------
                                    253 ; absolute internal ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area IABS    (ABS,DATA)
                                    256 	.area IABS    (ABS,DATA)
                                    257 ;--------------------------------------------------------
                                    258 ; bit data
                                    259 ;--------------------------------------------------------
                                    260 	.area BSEG    (BIT)
                                    261 ;--------------------------------------------------------
                                    262 ; paged external ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area PSEG    (PAG,XDATA)
                                    265 ;--------------------------------------------------------
                                    266 ; external ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area XSEG    (XDATA)
                                    269 ;--------------------------------------------------------
                                    270 ; absolute external ram data
                                    271 ;--------------------------------------------------------
                                    272 	.area XABS    (ABS,XDATA)
                                    273 ;--------------------------------------------------------
                                    274 ; external initialized ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area XISEG   (XDATA)
                                    277 	.area HOME    (CODE)
                                    278 	.area GSINIT0 (CODE)
                                    279 	.area GSINIT1 (CODE)
                                    280 	.area GSINIT2 (CODE)
                                    281 	.area GSINIT3 (CODE)
                                    282 	.area GSINIT4 (CODE)
                                    283 	.area GSINIT5 (CODE)
                                    284 	.area GSINIT  (CODE)
                                    285 	.area GSFINAL (CODE)
                                    286 	.area CSEG    (CODE)
                                    287 ;--------------------------------------------------------
                                    288 ; global & static initialisations
                                    289 ;--------------------------------------------------------
                                    290 	.area HOME    (CODE)
                                    291 	.area GSINIT  (CODE)
                                    292 	.area GSFINAL (CODE)
                                    293 	.area GSINIT  (CODE)
                                    294 ;--------------------------------------------------------
                                    295 ; Home
                                    296 ;--------------------------------------------------------
                                    297 	.area HOME    (CODE)
                                    298 	.area HOME    (CODE)
                                    299 ;--------------------------------------------------------
                                    300 ; code
                                    301 ;--------------------------------------------------------
                                    302 	.area CSEG    (CODE)
                                    303 ;------------------------------------------------------------
                                    304 ;Allocation info for local variables in function 'Bootstrap'
                                    305 ;------------------------------------------------------------
                                    306 ;	preemtive.c:125: void Bootstrap(void) {
                                    307 ;	-----------------------------------------
                                    308 ;	 function Bootstrap
                                    309 ;	-----------------------------------------
      000000                        310 _Bootstrap:
                           000007   311 	ar7 = 0x07
                           000006   312 	ar6 = 0x06
                           000005   313 	ar5 = 0x05
                           000004   314 	ar4 = 0x04
                           000003   315 	ar3 = 0x03
                           000002   316 	ar2 = 0x02
                           000001   317 	ar1 = 0x01
                           000000   318 	ar0 = 0x00
                                    319 ;	preemtive.c:138: TMOD = 0;  // timer 0 mode 0
      000000 75 89 00         [24]  320 	mov	_TMOD,#0x00
                                    321 ;	preemtive.c:139: IE = 0x82;  // enable timer 0 interrupt; keep consumer polling
      000003 75 A8 82         [24]  322 	mov	_IE,#0x82
                                    323 ;	preemtive.c:141: TR0 = 1; // set bit TR0 to start running timer 0
                                    324 ;	assignBit
      000006 D2 8C            [12]  325 	setb	_TR0
                                    326 ;	preemtive.c:142: bitmap = 0x00;
      000008 E4               [12]  327 	clr	a
      000009 F5 33            [12]  328 	mov	_bitmap,a
      00000B F5 34            [12]  329 	mov	(_bitmap + 1),a
                                    330 ;	preemtive.c:143: currentThreadId = ThreadCreate(main);
      00000D 90r00r00         [24]  331 	mov	dptr,#_main
      000010 12r00r48         [24]  332 	lcall	_ThreadCreate
      000013 85 82 31         [24]  333 	mov	_currentThreadId,dpl
                                    334 ;	preemtive.c:144: RESTORESTATE;
      000016 E5 31            [12]  335 	mov	a,_currentThreadId
      000018 FF               [12]  336 	mov	r7,a
      000019 24 FC            [12]  337 	add	a,#0xff - 0x03
      00001B 40 20            [24]  338 	jc	00106$
      00001D EF               [12]  339 	mov	a,r7
      00001E 2F               [12]  340 	add	a,r7
      00001F 90r00r23         [24]  341 	mov	dptr,#00114$
      000022 73               [24]  342 	jmp	@a+dptr
      000023                        343 00114$:
      000023 80 06            [24]  344 	sjmp	00101$
      000025 80 09            [24]  345 	sjmp	00102$
      000027 80 0C            [24]  346 	sjmp	00103$
      000029 80 0F            [24]  347 	sjmp	00104$
      00002B                        348 00101$:
      00002B 85 34 81         [24]  349 	MOV SP, 0x34 
      00002E 80 0D            [24]  350 	sjmp	00106$
      000030                        351 00102$:
      000030 85 35 81         [24]  352 	MOV SP, 0x35 
      000033 80 08            [24]  353 	sjmp	00106$
      000035                        354 00103$:
      000035 85 36 81         [24]  355 	MOV SP, 0x36 
      000038 80 03            [24]  356 	sjmp	00106$
      00003A                        357 00104$:
      00003A 85 37 81         [24]  358 	MOV SP, 0x37 
      00003D                        359 00106$:
      00003D D0 D0            [24]  360 	POP PSW 
      00003F D0 83            [24]  361 	POP DPH 
      000041 D0 82            [24]  362 	POP DPL 
      000043 D0 F0            [24]  363 	POP B 
      000045 D0 E0            [24]  364 	POP ACC 
                                    365 ;	preemtive.c:145: }
      000047 22               [24]  366 	ret
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'ThreadCreate'
                                    369 ;------------------------------------------------------------
                                    370 ;fp                        Allocated to registers 
                                    371 ;------------------------------------------------------------
                                    372 ;	preemtive.c:154: ThreadId ThreadCreate(FunctionPtr fp) {
                                    373 ;	-----------------------------------------
                                    374 ;	 function ThreadCreate
                                    375 ;	-----------------------------------------
      000048                        376 _ThreadCreate:
                                    377 ;	preemtive.c:199: EA = 0;
                                    378 ;	assignBit
      000048 C2 AF            [12]  379 	clr	_EA
                                    380 ;	preemtive.c:200: if((bitmap & 0xFF)==0xFF){
      00004A AE 33            [24]  381 	mov	r6,_bitmap
      00004C E5 34            [12]  382 	mov	a,(_bitmap + 1)
      00004E 7F 00            [12]  383 	mov	r7,#0x00
      000050 BE FF 07         [24]  384 	cjne	r6,#0xff,00102$
      000053 BF 00 04         [24]  385 	cjne	r7,#0x00,00102$
                                    386 ;	preemtive.c:201: return -1;
      000056 75 82 FF         [24]  387 	mov	dpl,#0xff
      000059 22               [24]  388 	ret
      00005A                        389 00102$:
                                    390 ;	preemtive.c:203: TempSP = SP; 
      00005A 85 81 38         [24]  391 	mov	_TempSP,_SP
      00005D 75 39 00         [24]  392 	mov	(_TempSP + 1),#0x00
                                    393 ;	preemtive.c:204: if((bitmap & 0x01) == 0x00){
      000060 E5 33            [12]  394 	mov	a,_bitmap
      000062 20 E0 0E         [24]  395 	jb	acc.0,00112$
                                    396 ;	preemtive.c:208: __endasm;
      000065 75 34 3F         [24]  397 	MOV	0x34 , #0x3F
      000068 43 33 01         [24]  398 	ORL	0X33 ,#0X01
                                    399 ;	preemtive.c:209: createdThreadId = 0;
      00006B 75 30 00         [24]  400 	mov	_createdThreadId,#0x00
                                    401 ;	preemtive.c:210: SP = Thread0SP;
      00006E 85 34 81         [24]  402 	mov	_SP,_Thread0SP
      000071 80 37            [24]  403 	sjmp	00113$
      000073                        404 00112$:
                                    405 ;	preemtive.c:212: else if((bitmap & 0x02) ==0x00){
      000073 E5 33            [12]  406 	mov	a,_bitmap
      000075 20 E1 0E         [24]  407 	jb	acc.1,00109$
                                    408 ;	preemtive.c:216: __endasm;
      000078 75 35 4F         [24]  409 	MOV	0x35 , #0x4F
      00007B 43 33 02         [24]  410 	ORL	0X33 ,#0X02
                                    411 ;	preemtive.c:217: createdThreadId = 1;
      00007E 75 30 01         [24]  412 	mov	_createdThreadId,#0x01
                                    413 ;	preemtive.c:218: SP = Thread1SP;
      000081 85 35 81         [24]  414 	mov	_SP,_Thread1SP
      000084 80 24            [24]  415 	sjmp	00113$
      000086                        416 00109$:
                                    417 ;	preemtive.c:220: else if((bitmap & 0x04) ==0x00){
      000086 E5 33            [12]  418 	mov	a,_bitmap
      000088 20 E2 0E         [24]  419 	jb	acc.2,00106$
                                    420 ;	preemtive.c:224: __endasm;
      00008B 75 36 5F         [24]  421 	MOV	0x36 , #0x5F
      00008E 43 33 04         [24]  422 	ORL	0X33 ,#0X04
                                    423 ;	preemtive.c:225: createdThreadId = 2;
      000091 75 30 02         [24]  424 	mov	_createdThreadId,#0x02
                                    425 ;	preemtive.c:226: SP = Thread2SP;
      000094 85 36 81         [24]  426 	mov	_SP,_Thread2SP
      000097 80 11            [24]  427 	sjmp	00113$
      000099                        428 00106$:
                                    429 ;	preemtive.c:228: else if((bitmap & 0x08) ==0x00){
      000099 E5 33            [12]  430 	mov	a,_bitmap
      00009B 20 E3 0C         [24]  431 	jb	acc.3,00113$
                                    432 ;	preemtive.c:232: __endasm;
      00009E 75 37 6F         [24]  433 	MOV	0x37 , #0x6F
      0000A1 43 33 08         [24]  434 	ORL	0X33 ,#0X08
                                    435 ;	preemtive.c:233: createdThreadId = 3;
      0000A4 75 30 03         [24]  436 	mov	_createdThreadId,#0x03
                                    437 ;	preemtive.c:234: SP = Thread3SP ;
      0000A7 85 37 81         [24]  438 	mov	_SP,_Thread3SP
      0000AA                        439 00113$:
                                    440 ;	preemtive.c:244: __endasm;
      0000AA C0 82            [24]  441 	PUSH	DPL
      0000AC C0 83            [24]  442 	PUSH	DPH
      0000AE E5 00            [12]  443 	MOV	A , 0X00
      0000B0 C0 E0            [24]  444 	PUSH	ACC
      0000B2 C0 E0            [24]  445 	PUSH	ACC
      0000B4 C0 E0            [24]  446 	PUSH	ACC
      0000B6 C0 E0            [24]  447 	PUSH	ACC
                                    448 ;	preemtive.c:245: switch(createdThreadId ){
      0000B8 E5 30            [12]  449 	mov	a,_createdThreadId
      0000BA FF               [12]  450 	mov	r7,a
      0000BB 24 FC            [12]  451 	add	a,#0xff - 0x03
      0000BD 40 40            [24]  452 	jc	00119$
      0000BF EF               [12]  453 	mov	a,r7
      0000C0 2F               [12]  454 	add	a,r7
                                    455 ;	preemtive.c:246: case 0:
      0000C1 90r00rC5         [24]  456 	mov	dptr,#00153$
      0000C4 73               [24]  457 	jmp	@a+dptr
      0000C5                        458 00153$:
      0000C5 80 06            [24]  459 	sjmp	00114$
      0000C7 80 11            [24]  460 	sjmp	00115$
      0000C9 80 1C            [24]  461 	sjmp	00116$
      0000CB 80 27            [24]  462 	sjmp	00117$
      0000CD                        463 00114$:
                                    464 ;	preemtive.c:250: __endasm;
      0000CD 75 D0 00         [24]  465 	MOV	PSW ,#0X00
      0000D0 C0 D0            [24]  466 	PUSH	PSW
                                    467 ;	preemtive.c:251: Thread0SP=SP; 	
      0000D2 85 81 34         [24]  468 	mov	_Thread0SP,_SP
      0000D5 75 35 00         [24]  469 	mov	(_Thread0SP + 1),#0x00
                                    470 ;	preemtive.c:252: break;
                                    471 ;	preemtive.c:253: case 1:
      0000D8 80 25            [24]  472 	sjmp	00119$
      0000DA                        473 00115$:
                                    474 ;	preemtive.c:257: __endasm;
      0000DA 75 D0 08         [24]  475 	MOV	PSW ,#0X08
      0000DD C0 D0            [24]  476 	PUSH	PSW
                                    477 ;	preemtive.c:258: Thread1SP=SP; 	
      0000DF 85 81 35         [24]  478 	mov	_Thread1SP,_SP
      0000E2 75 36 00         [24]  479 	mov	(_Thread1SP + 1),#0x00
                                    480 ;	preemtive.c:259: break;
                                    481 ;	preemtive.c:260: case 2:
      0000E5 80 18            [24]  482 	sjmp	00119$
      0000E7                        483 00116$:
                                    484 ;	preemtive.c:264: __endasm;
      0000E7 75 D0 10         [24]  485 	MOV	PSW ,#0X10
      0000EA C0 D0            [24]  486 	PUSH	PSW
                                    487 ;	preemtive.c:265: Thread2SP=SP; 	
      0000EC 85 81 36         [24]  488 	mov	_Thread2SP,_SP
      0000EF 75 37 00         [24]  489 	mov	(_Thread2SP + 1),#0x00
                                    490 ;	preemtive.c:266: break;
                                    491 ;	preemtive.c:267: case 3:
      0000F2 80 0B            [24]  492 	sjmp	00119$
      0000F4                        493 00117$:
                                    494 ;	preemtive.c:271: __endasm;
      0000F4 75 D0 18         [24]  495 	MOV	PSW ,#0X18
      0000F7 C0 D0            [24]  496 	PUSH	PSW
                                    497 ;	preemtive.c:272: Thread3SP=SP;
      0000F9 85 81 37         [24]  498 	mov	_Thread3SP,_SP
      0000FC 75 38 00         [24]  499 	mov	(_Thread3SP + 1),#0x00
                                    500 ;	preemtive.c:276: }
      0000FF                        501 00119$:
                                    502 ;	preemtive.c:277: SP = TempSP;
      0000FF 85 38 81         [24]  503 	mov	_SP,_TempSP
                                    504 ;	preemtive.c:278: EA=1;
                                    505 ;	assignBit
      000102 D2 AF            [12]  506 	setb	_EA
                                    507 ;	preemtive.c:279: return createdThreadId;
      000104 85 30 82         [24]  508 	mov	dpl,_createdThreadId
                                    509 ;	preemtive.c:281: }
      000107 22               [24]  510 	ret
                                    511 ;------------------------------------------------------------
                                    512 ;Allocation info for local variables in function 'myTimer0Handler'
                                    513 ;------------------------------------------------------------
                                    514 ;	preemtive.c:291: void myTimer0Handler(void){
                                    515 ;	-----------------------------------------
                                    516 ;	 function myTimer0Handler
                                    517 ;	-----------------------------------------
      000108                        518 _myTimer0Handler:
                                    519 ;	preemtive.c:292: EA = 0;
                                    520 ;	assignBit
      000108 C2 AF            [12]  521 	clr	_EA
                                    522 ;	preemtive.c:293: SAVESTATE;
      00010A C0 E0            [24]  523 	PUSH ACC 
      00010C C0 F0            [24]  524 	PUSH B 
      00010E C0 82            [24]  525 	PUSH DPL 
      000110 C0 83            [24]  526 	PUSH DPH 
      000112 C0 D0            [24]  527 	PUSH PSW 
      000114 E5 31            [12]  528 	mov	a,_currentThreadId
      000116 FF               [12]  529 	mov	r7,a
      000117 24 FC            [12]  530 	add	a,#0xff - 0x03
      000119 40 20            [24]  531 	jc	00128$
      00011B EF               [12]  532 	mov	a,r7
      00011C 2F               [12]  533 	add	a,r7
      00011D 90r01r21         [24]  534 	mov	dptr,#00172$
      000120 73               [24]  535 	jmp	@a+dptr
      000121                        536 00172$:
      000121 80 06            [24]  537 	sjmp	00101$
      000123 80 09            [24]  538 	sjmp	00102$
      000125 80 0C            [24]  539 	sjmp	00103$
      000127 80 0F            [24]  540 	sjmp	00104$
      000129                        541 00101$:
      000129 85 81 34         [24]  542 	MOV 0x34, SP 
      00012C 80 0D            [24]  543 	sjmp	00128$
      00012E                        544 00102$:
      00012E 85 81 35         [24]  545 	MOV 0x35, SP 
      000131 80 08            [24]  546 	sjmp	00128$
      000133                        547 00103$:
      000133 85 81 36         [24]  548 	MOV 0x36, SP 
      000136 80 03            [24]  549 	sjmp	00128$
      000138                        550 00104$:
      000138 85 81 37         [24]  551 	MOV 0x37, SP 
                                    552 ;	preemtive.c:294: do {
      00013B                        553 00128$:
                                    554 ;	preemtive.c:304: switch (currentThreadId) {
      00013B E5 31            [12]  555 	mov	a,_currentThreadId
      00013D FF               [12]  556 	mov	r7,a
      00013E 24 FC            [12]  557 	add	a,#0xff - 0x03
      000140 40 20            [24]  558 	jc	00112$
      000142 EF               [12]  559 	mov	a,r7
      000143 2F               [12]  560 	add	a,r7
                                    561 ;	preemtive.c:305: case 0:
      000144 90r01r48         [24]  562 	mov	dptr,#00174$
      000147 73               [24]  563 	jmp	@a+dptr
      000148                        564 00174$:
      000148 80 06            [24]  565 	sjmp	00107$
      00014A 80 09            [24]  566 	sjmp	00108$
      00014C 80 0C            [24]  567 	sjmp	00109$
      00014E 80 0F            [24]  568 	sjmp	00110$
      000150                        569 00107$:
                                    570 ;	preemtive.c:306: currentThreadId = 1;
      000150 75 31 01         [24]  571 	mov	_currentThreadId,#0x01
                                    572 ;	preemtive.c:307: break;
                                    573 ;	preemtive.c:308: case 1:
      000153 80 0D            [24]  574 	sjmp	00112$
      000155                        575 00108$:
                                    576 ;	preemtive.c:309: currentThreadId = 2;
      000155 75 31 02         [24]  577 	mov	_currentThreadId,#0x02
                                    578 ;	preemtive.c:310: break;
                                    579 ;	preemtive.c:311: case 2:
      000158 80 08            [24]  580 	sjmp	00112$
      00015A                        581 00109$:
                                    582 ;	preemtive.c:312: currentThreadId = 3;
      00015A 75 31 03         [24]  583 	mov	_currentThreadId,#0x03
                                    584 ;	preemtive.c:313: break;
                                    585 ;	preemtive.c:314: case 3:
      00015D 80 03            [24]  586 	sjmp	00112$
      00015F                        587 00110$:
                                    588 ;	preemtive.c:315: currentThreadId = 0;
      00015F 75 31 00         [24]  589 	mov	_currentThreadId,#0x00
                                    590 ;	preemtive.c:319: }
      000162                        591 00112$:
                                    592 ;	preemtive.c:320: if( (currentThreadId==0) &&  ((bitmap & 0x01)==0x01) ){
      000162 E5 31            [12]  593 	mov	a,_currentThreadId
      000164 70 11            [24]  594 	jnz	00125$
      000166 74 01            [12]  595 	mov	a,#0x01
      000168 55 33            [12]  596 	anl	a,_bitmap
      00016A FE               [12]  597 	mov	r6,a
      00016B E5 34            [12]  598 	mov	a,(_bitmap + 1)
      00016D 7F 00            [12]  599 	mov	r7,#0x00
      00016F BE 01 05         [24]  600 	cjne	r6,#0x01,00176$
      000172 BF 00 02         [24]  601 	cjne	r7,#0x00,00176$
      000175 80 4A            [24]  602 	sjmp	00130$
      000177                        603 00176$:
                                    604 ;	preemtive.c:321: break;
      000177                        605 00125$:
                                    606 ;	preemtive.c:323: else if((currentThreadId==1) &&  ((bitmap & 0x02)==0x02)){
      000177 74 01            [12]  607 	mov	a,#0x01
      000179 B5 31 11         [24]  608 	cjne	a,_currentThreadId,00121$
      00017C 74 02            [12]  609 	mov	a,#0x02
      00017E 55 33            [12]  610 	anl	a,_bitmap
      000180 FE               [12]  611 	mov	r6,a
      000181 E5 34            [12]  612 	mov	a,(_bitmap + 1)
      000183 7F 00            [12]  613 	mov	r7,#0x00
      000185 BE 02 05         [24]  614 	cjne	r6,#0x02,00179$
      000188 BF 00 02         [24]  615 	cjne	r7,#0x00,00179$
      00018B 80 34            [24]  616 	sjmp	00130$
      00018D                        617 00179$:
                                    618 ;	preemtive.c:324: break;
      00018D                        619 00121$:
                                    620 ;	preemtive.c:326: else if((currentThreadId==2) &&  ((bitmap & 0x04)==0x04)){
      00018D 74 02            [12]  621 	mov	a,#0x02
      00018F B5 31 11         [24]  622 	cjne	a,_currentThreadId,00117$
      000192 74 04            [12]  623 	mov	a,#0x04
      000194 55 33            [12]  624 	anl	a,_bitmap
      000196 FE               [12]  625 	mov	r6,a
      000197 E5 34            [12]  626 	mov	a,(_bitmap + 1)
      000199 7F 00            [12]  627 	mov	r7,#0x00
      00019B BE 04 05         [24]  628 	cjne	r6,#0x04,00182$
      00019E BF 00 02         [24]  629 	cjne	r7,#0x00,00182$
      0001A1 80 1E            [24]  630 	sjmp	00130$
      0001A3                        631 00182$:
                                    632 ;	preemtive.c:327: break;
      0001A3                        633 00117$:
                                    634 ;	preemtive.c:329: else if( (currentThreadId==3) &&  ((bitmap & 0x08)==0x08) ){
      0001A3 74 03            [12]  635 	mov	a,#0x03
      0001A5 B5 31 02         [24]  636 	cjne	a,_currentThreadId,00183$
      0001A8 80 03            [24]  637 	sjmp	00184$
      0001AA                        638 00183$:
      0001AA 02r01r3B         [24]  639 	ljmp	00128$
      0001AD                        640 00184$:
      0001AD 74 08            [12]  641 	mov	a,#0x08
      0001AF 55 33            [12]  642 	anl	a,_bitmap
      0001B1 FE               [12]  643 	mov	r6,a
      0001B2 E5 34            [12]  644 	mov	a,(_bitmap + 1)
      0001B4 7F 00            [12]  645 	mov	r7,#0x00
      0001B6 BE 08 05         [24]  646 	cjne	r6,#0x08,00185$
      0001B9 BF 00 02         [24]  647 	cjne	r7,#0x00,00185$
      0001BC 80 03            [24]  648 	sjmp	00186$
      0001BE                        649 00185$:
      0001BE 02r01r3B         [24]  650 	ljmp	00128$
      0001C1                        651 00186$:
                                    652 ;	preemtive.c:333: } while (1);
      0001C1                        653 00130$:
                                    654 ;	preemtive.c:334: RESTORESTATE;
      0001C1 E5 31            [12]  655 	mov	a,_currentThreadId
      0001C3 FF               [12]  656 	mov	r7,a
      0001C4 24 FC            [12]  657 	add	a,#0xff - 0x03
      0001C6 40 20            [24]  658 	jc	00136$
      0001C8 EF               [12]  659 	mov	a,r7
      0001C9 2F               [12]  660 	add	a,r7
      0001CA 90r01rCE         [24]  661 	mov	dptr,#00188$
      0001CD 73               [24]  662 	jmp	@a+dptr
      0001CE                        663 00188$:
      0001CE 80 06            [24]  664 	sjmp	00131$
      0001D0 80 09            [24]  665 	sjmp	00132$
      0001D2 80 0C            [24]  666 	sjmp	00133$
      0001D4 80 0F            [24]  667 	sjmp	00134$
      0001D6                        668 00131$:
      0001D6 85 34 81         [24]  669 	MOV SP, 0x34 
      0001D9 80 0D            [24]  670 	sjmp	00136$
      0001DB                        671 00132$:
      0001DB 85 35 81         [24]  672 	MOV SP, 0x35 
      0001DE 80 08            [24]  673 	sjmp	00136$
      0001E0                        674 00133$:
      0001E0 85 36 81         [24]  675 	MOV SP, 0x36 
      0001E3 80 03            [24]  676 	sjmp	00136$
      0001E5                        677 00134$:
      0001E5 85 37 81         [24]  678 	MOV SP, 0x37 
      0001E8                        679 00136$:
      0001E8 D0 D0            [24]  680 	POP PSW 
      0001EA D0 83            [24]  681 	POP DPH 
      0001EC D0 82            [24]  682 	POP DPL 
      0001EE D0 F0            [24]  683 	POP B 
      0001F0 D0 E0            [24]  684 	POP ACC 
                                    685 ;	preemtive.c:335: EA = 1;//after restore psw set ea=1
                                    686 ;	assignBit
      0001F2 D2 AF            [12]  687 	setb	_EA
                                    688 ;	preemtive.c:338: __endasm;       
      0001F4 32               [24]  689 	RETI
                                    690 ;	preemtive.c:339: }
      0001F5 22               [24]  691 	ret
                                    692 ;------------------------------------------------------------
                                    693 ;Allocation info for local variables in function 'ThreadYield'
                                    694 ;------------------------------------------------------------
                                    695 ;	preemtive.c:340: void ThreadYield(void) {
                                    696 ;	-----------------------------------------
                                    697 ;	 function ThreadYield
                                    698 ;	-----------------------------------------
      0001F6                        699 _ThreadYield:
                                    700 ;	preemtive.c:341: SAVESTATE;
      0001F6 C0 E0            [24]  701 	PUSH ACC 
      0001F8 C0 F0            [24]  702 	PUSH B 
      0001FA C0 82            [24]  703 	PUSH DPL 
      0001FC C0 83            [24]  704 	PUSH DPH 
      0001FE C0 D0            [24]  705 	PUSH PSW 
      000200 E5 31            [12]  706 	mov	a,_currentThreadId
      000202 FF               [12]  707 	mov	r7,a
      000203 24 FC            [12]  708 	add	a,#0xff - 0x03
      000205 40 20            [24]  709 	jc	00128$
      000207 EF               [12]  710 	mov	a,r7
      000208 2F               [12]  711 	add	a,r7
      000209 90r02r0D         [24]  712 	mov	dptr,#00172$
      00020C 73               [24]  713 	jmp	@a+dptr
      00020D                        714 00172$:
      00020D 80 06            [24]  715 	sjmp	00101$
      00020F 80 09            [24]  716 	sjmp	00102$
      000211 80 0C            [24]  717 	sjmp	00103$
      000213 80 0F            [24]  718 	sjmp	00104$
      000215                        719 00101$:
      000215 85 81 34         [24]  720 	MOV 0x34, SP 
      000218 80 0D            [24]  721 	sjmp	00128$
      00021A                        722 00102$:
      00021A 85 81 35         [24]  723 	MOV 0x35, SP 
      00021D 80 08            [24]  724 	sjmp	00128$
      00021F                        725 00103$:
      00021F 85 81 36         [24]  726 	MOV 0x36, SP 
      000222 80 03            [24]  727 	sjmp	00128$
      000224                        728 00104$:
      000224 85 81 37         [24]  729 	MOV 0x37, SP 
                                    730 ;	preemtive.c:342: do {
      000227                        731 00128$:
                                    732 ;	preemtive.c:352: switch (currentThreadId) {
      000227 E5 31            [12]  733 	mov	a,_currentThreadId
      000229 FF               [12]  734 	mov	r7,a
      00022A 24 FC            [12]  735 	add	a,#0xff - 0x03
      00022C 40 20            [24]  736 	jc	00112$
      00022E EF               [12]  737 	mov	a,r7
      00022F 2F               [12]  738 	add	a,r7
                                    739 ;	preemtive.c:353: case 0:
      000230 90r02r34         [24]  740 	mov	dptr,#00174$
      000233 73               [24]  741 	jmp	@a+dptr
      000234                        742 00174$:
      000234 80 06            [24]  743 	sjmp	00107$
      000236 80 09            [24]  744 	sjmp	00108$
      000238 80 0C            [24]  745 	sjmp	00109$
      00023A 80 0F            [24]  746 	sjmp	00110$
      00023C                        747 00107$:
                                    748 ;	preemtive.c:354: currentThreadId = 1;
      00023C 75 31 01         [24]  749 	mov	_currentThreadId,#0x01
                                    750 ;	preemtive.c:355: break;
                                    751 ;	preemtive.c:356: case 1:
      00023F 80 0D            [24]  752 	sjmp	00112$
      000241                        753 00108$:
                                    754 ;	preemtive.c:357: currentThreadId = 2;
      000241 75 31 02         [24]  755 	mov	_currentThreadId,#0x02
                                    756 ;	preemtive.c:358: break;
                                    757 ;	preemtive.c:359: case 2:
      000244 80 08            [24]  758 	sjmp	00112$
      000246                        759 00109$:
                                    760 ;	preemtive.c:360: currentThreadId = 3;
      000246 75 31 03         [24]  761 	mov	_currentThreadId,#0x03
                                    762 ;	preemtive.c:361: break;
                                    763 ;	preemtive.c:362: case 3:
      000249 80 03            [24]  764 	sjmp	00112$
      00024B                        765 00110$:
                                    766 ;	preemtive.c:363: currentThreadId = 0;
      00024B 75 31 00         [24]  767 	mov	_currentThreadId,#0x00
                                    768 ;	preemtive.c:367: }
      00024E                        769 00112$:
                                    770 ;	preemtive.c:368: if( (currentThreadId==0) &&  ((bitmap & 0x01)==0x01) ){
      00024E E5 31            [12]  771 	mov	a,_currentThreadId
      000250 70 11            [24]  772 	jnz	00125$
      000252 74 01            [12]  773 	mov	a,#0x01
      000254 55 33            [12]  774 	anl	a,_bitmap
      000256 FE               [12]  775 	mov	r6,a
      000257 E5 34            [12]  776 	mov	a,(_bitmap + 1)
      000259 7F 00            [12]  777 	mov	r7,#0x00
      00025B BE 01 05         [24]  778 	cjne	r6,#0x01,00176$
      00025E BF 00 02         [24]  779 	cjne	r7,#0x00,00176$
      000261 80 4A            [24]  780 	sjmp	00130$
      000263                        781 00176$:
                                    782 ;	preemtive.c:369: break;
      000263                        783 00125$:
                                    784 ;	preemtive.c:371: else if((currentThreadId==1) &&  ((bitmap & 0x02)==0x02)){
      000263 74 01            [12]  785 	mov	a,#0x01
      000265 B5 31 11         [24]  786 	cjne	a,_currentThreadId,00121$
      000268 74 02            [12]  787 	mov	a,#0x02
      00026A 55 33            [12]  788 	anl	a,_bitmap
      00026C FE               [12]  789 	mov	r6,a
      00026D E5 34            [12]  790 	mov	a,(_bitmap + 1)
      00026F 7F 00            [12]  791 	mov	r7,#0x00
      000271 BE 02 05         [24]  792 	cjne	r6,#0x02,00179$
      000274 BF 00 02         [24]  793 	cjne	r7,#0x00,00179$
      000277 80 34            [24]  794 	sjmp	00130$
      000279                        795 00179$:
                                    796 ;	preemtive.c:372: break;
      000279                        797 00121$:
                                    798 ;	preemtive.c:374: else if((currentThreadId==2) &&  ((bitmap & 0x04)==0x04)){
      000279 74 02            [12]  799 	mov	a,#0x02
      00027B B5 31 11         [24]  800 	cjne	a,_currentThreadId,00117$
      00027E 74 04            [12]  801 	mov	a,#0x04
      000280 55 33            [12]  802 	anl	a,_bitmap
      000282 FE               [12]  803 	mov	r6,a
      000283 E5 34            [12]  804 	mov	a,(_bitmap + 1)
      000285 7F 00            [12]  805 	mov	r7,#0x00
      000287 BE 04 05         [24]  806 	cjne	r6,#0x04,00182$
      00028A BF 00 02         [24]  807 	cjne	r7,#0x00,00182$
      00028D 80 1E            [24]  808 	sjmp	00130$
      00028F                        809 00182$:
                                    810 ;	preemtive.c:375: break;
      00028F                        811 00117$:
                                    812 ;	preemtive.c:377: else if( (currentThreadId==3) &&  ((bitmap & 0x08)==0x08) ){
      00028F 74 03            [12]  813 	mov	a,#0x03
      000291 B5 31 02         [24]  814 	cjne	a,_currentThreadId,00183$
      000294 80 03            [24]  815 	sjmp	00184$
      000296                        816 00183$:
      000296 02r02r27         [24]  817 	ljmp	00128$
      000299                        818 00184$:
      000299 74 08            [12]  819 	mov	a,#0x08
      00029B 55 33            [12]  820 	anl	a,_bitmap
      00029D FE               [12]  821 	mov	r6,a
      00029E E5 34            [12]  822 	mov	a,(_bitmap + 1)
      0002A0 7F 00            [12]  823 	mov	r7,#0x00
      0002A2 BE 08 05         [24]  824 	cjne	r6,#0x08,00185$
      0002A5 BF 00 02         [24]  825 	cjne	r7,#0x00,00185$
      0002A8 80 03            [24]  826 	sjmp	00186$
      0002AA                        827 00185$:
      0002AA 02r02r27         [24]  828 	ljmp	00128$
      0002AD                        829 00186$:
                                    830 ;	preemtive.c:381: } while (1);
      0002AD                        831 00130$:
                                    832 ;	preemtive.c:382: RESTORESTATE;
      0002AD E5 31            [12]  833 	mov	a,_currentThreadId
      0002AF FF               [12]  834 	mov	r7,a
      0002B0 24 FC            [12]  835 	add	a,#0xff - 0x03
      0002B2 40 20            [24]  836 	jc	00136$
      0002B4 EF               [12]  837 	mov	a,r7
      0002B5 2F               [12]  838 	add	a,r7
      0002B6 90r02rBA         [24]  839 	mov	dptr,#00188$
      0002B9 73               [24]  840 	jmp	@a+dptr
      0002BA                        841 00188$:
      0002BA 80 06            [24]  842 	sjmp	00131$
      0002BC 80 09            [24]  843 	sjmp	00132$
      0002BE 80 0C            [24]  844 	sjmp	00133$
      0002C0 80 0F            [24]  845 	sjmp	00134$
      0002C2                        846 00131$:
      0002C2 85 34 81         [24]  847 	MOV SP, 0x34 
      0002C5 80 0D            [24]  848 	sjmp	00136$
      0002C7                        849 00132$:
      0002C7 85 35 81         [24]  850 	MOV SP, 0x35 
      0002CA 80 08            [24]  851 	sjmp	00136$
      0002CC                        852 00133$:
      0002CC 85 36 81         [24]  853 	MOV SP, 0x36 
      0002CF 80 03            [24]  854 	sjmp	00136$
      0002D1                        855 00134$:
      0002D1 85 37 81         [24]  856 	MOV SP, 0x37 
      0002D4                        857 00136$:
      0002D4 D0 D0            [24]  858 	POP PSW 
      0002D6 D0 83            [24]  859 	POP DPH 
      0002D8 D0 82            [24]  860 	POP DPL 
      0002DA D0 F0            [24]  861 	POP B 
      0002DC D0 E0            [24]  862 	POP ACC 
                                    863 ;	preemtive.c:383: }
      0002DE 22               [24]  864 	ret
                                    865 ;------------------------------------------------------------
                                    866 ;Allocation info for local variables in function 'ThreadExit'
                                    867 ;------------------------------------------------------------
                                    868 ;	preemtive.c:391: void ThreadExit(void) {
                                    869 ;	-----------------------------------------
                                    870 ;	 function ThreadExit
                                    871 ;	-----------------------------------------
      0002DF                        872 _ThreadExit:
                                    873 ;	preemtive.c:398: RESTORESTATE;
      0002DF E5 31            [12]  874 	mov	a,_currentThreadId
      0002E1 FF               [12]  875 	mov	r7,a
      0002E2 24 FC            [12]  876 	add	a,#0xff - 0x03
      0002E4 40 20            [24]  877 	jc	00106$
      0002E6 EF               [12]  878 	mov	a,r7
      0002E7 2F               [12]  879 	add	a,r7
      0002E8 90r02rEC         [24]  880 	mov	dptr,#00114$
      0002EB 73               [24]  881 	jmp	@a+dptr
      0002EC                        882 00114$:
      0002EC 80 06            [24]  883 	sjmp	00101$
      0002EE 80 09            [24]  884 	sjmp	00102$
      0002F0 80 0C            [24]  885 	sjmp	00103$
      0002F2 80 0F            [24]  886 	sjmp	00104$
      0002F4                        887 00101$:
      0002F4 85 34 81         [24]  888 	MOV SP, 0x34 
      0002F7 80 0D            [24]  889 	sjmp	00106$
      0002F9                        890 00102$:
      0002F9 85 35 81         [24]  891 	MOV SP, 0x35 
      0002FC 80 08            [24]  892 	sjmp	00106$
      0002FE                        893 00103$:
      0002FE 85 36 81         [24]  894 	MOV SP, 0x36 
      000301 80 03            [24]  895 	sjmp	00106$
      000303                        896 00104$:
      000303 85 37 81         [24]  897 	MOV SP, 0x37 
      000306                        898 00106$:
      000306 D0 D0            [24]  899 	POP PSW 
      000308 D0 83            [24]  900 	POP DPH 
      00030A D0 82            [24]  901 	POP DPL 
      00030C D0 F0            [24]  902 	POP B 
      00030E D0 E0            [24]  903 	POP ACC 
                                    904 ;	preemtive.c:399: }
      000310 22               [24]  905 	ret
                                    906 	.area CSEG    (CODE)
                                    907 	.area CONST   (CODE)
                                    908 	.area XINIT   (CODE)
                                    909 	.area CABS    (ABS,CODE)
